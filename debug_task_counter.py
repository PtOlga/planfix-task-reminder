import requests
import configparser
import os
import json
from typing import List, Dict, Any

class DebugTaskManager:
    def __init__(self, account_url: str, api_token: str):
        self.account_url = account_url.rstrip('/')
        self.api_token = api_token
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        })

    def debug_user_tasks(self, user_id: str, user_name: str):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüîç –û–¢–õ–ê–î–ö–ê –ó–ê–î–ê–ß –î–õ–Ø: {user_name} (ID: {user_id})")
        print("="*60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨...")
        assignee_tasks = self._get_tasks_by_filter(user_id, filter_type=2, filter_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫  
        print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–û–°–¢–ê–ù–û–í–©–ò–ö...")
        assigner_tasks = self._get_tasks_by_filter(user_id, filter_type=3, filter_name="–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ö–û–ù–¢–†–û–õ–ï–†...")
        auditor_tasks = self._get_tasks_by_filter(user_id, filter_type=4, filter_name="–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä")
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
        print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è—é –í–°–ï –∑–∞–¥–∞—á–∏ –∏ –∏—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é...")
        manual_tasks = self._get_all_tasks_and_filter_manually(user_id, user_name)
        
        # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_unique_tasks = set()
        for tasks in [assignee_tasks, assigner_tasks, auditor_tasks, manual_tasks]:
            for task in tasks:
                total_unique_tasks.add(task.get('id'))
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¥–ª—è {user_name}:")
        print(f"   –ö–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {len(assignee_tasks)} –∑–∞–¥–∞—á")
        print(f"   –ö–∞–∫ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {len(assigner_tasks)} –∑–∞–¥–∞—á") 
        print(f"   –ö–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä: {len(auditor_tasks)} –∑–∞–¥–∞—á")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É—é: {len(manual_tasks)} –∑–∞–¥–∞—á")
        print(f"   –í–°–ï–ì–û —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(total_unique_tasks)} –∑–∞–¥–∞—á")
        
        return list(total_unique_tasks)

    def _get_tasks_by_filter(self, user_id: str, filter_type: int, filter_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            payload = {
                "offset": 0,
                "pageSize": 100,
                "filters": [
                    {
                        "type": filter_type,
                        "operator": "equal",
                        "value": f"user:{user_id}"
                    }
                ],
                "fields": "id,name,status,overdue,endDateTime,assignees,assigner,auditors"
            }
            
            print(f"   üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}...")
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('result') == 'fail':
                    print(f"   ‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return []
                
                tasks = data.get('tasks', [])
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∫–∞–∫ {filter_name}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if tasks:
                    print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á:")
                    for i, task in enumerate(tasks[:3]):
                        print(f"      {i+1}. {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {task.get('id')})")
                
                return tasks
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return []

    def _get_all_tasks_and_filter_manually(self, user_id: str, user_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –≤—Ä—É—á–Ω—É—é"""
        try:
            print(f"   üì° –ü–æ–ª—É—á–∞—é –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
            payload = {
                "offset": 0,
                "pageSize": 200,
                "fields": "id,name,status,overdue,endDateTime,assignees,participants,auditors,assigner"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                all_tasks = data.get('tasks', [])
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –≤—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ")
                
                user_tasks = []
                user_id_str = str(user_id)
                
                for task in all_tasks:
                    is_user_involved = False
                    involvement_reason = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                    assignees = task.get('assignees', {})
                    if assignees and isinstance(assignees, dict):
                        users = assignees.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                involvement_reason.append("–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants = task.get('participants', {})
                    if participants and isinstance(participants, dict):
                        users = participants.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                involvement_reason.append("—É—á–∞—Å—Ç–Ω–∏–∫")
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤
                    auditors = task.get('auditors', {})
                    if auditors and isinstance(auditors, dict):
                        users = auditors.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                involvement_reason.append("–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä")
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                    assigner = task.get('assigner', {})
                    if assigner and isinstance(assigner, dict):
                        if str(assigner.get('id', '')) == user_id_str:
                            is_user_involved = True
                            involvement_reason.append("–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫")
                    
                    if is_user_involved:
                        task['involvement_reason'] = involvement_reason
                        user_tasks.append(task)
                
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_tasks)} –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if user_tasks:
                    print(f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                    for i, task in enumerate(user_tasks[:5]):
                        reasons = ", ".join(task.get('involvement_reason', []))
                        print(f"      {i+1}. {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - –∫–∞–∫ {reasons}")
                
                return user_tasks
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return []

    def debug_api_filters(self):
        """–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ API"""
        print(f"\nüîß –û–¢–õ–ê–î–ö–ê API –§–ò–õ–¨–¢–†–û–í")
        print("="*40)
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É—é –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        try:
            payload = {
                "offset": 0,
                "pageSize": 5,
                "fields": "id,name,assignees,assigner"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                tasks = data.get('tasks', [])
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
                
                if tasks:
                    print("   üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–¥–∞—á–∏:")
                    print(json.dumps(tasks[0], indent=2, ensure_ascii=False))
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_specific_user(self, user_id: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüéØ –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID: {user_id}")
        print("="*40)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            payload = {
                "offset": 0,
                "pageSize": 100,
                "fields": "id,name,lastname,email"
            }
            
            response = self.session.post(
                f"{self.account_url}/user/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                users = data.get('users', [])
                
                target_user = None
                for user in users:
                    if str(user.get('id')) == str(user_id):
                        target_user = user
                        break
                
                if target_user:
                    name = f"{target_user.get('lastname', '')} {target_user.get('name', '')}"
                    print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
                    self.debug_user_tasks(user_id, name)
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def load_admin_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    config_file = 'admin_config.ini'
    
    if not os.path.exists(config_file):
        print(f"‚ùå –§–∞–π–ª {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None, None
    
    config = configparser.ConfigParser()
    
    try:
        config.read(config_file, encoding='utf-8')
        api_token = config['Planfix']['api_token']
        account_url = config['Planfix']['account_url']
        return api_token, account_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None, None

def main():
    print("üîç PLANFIX TASK DEBUG - –û—Ç–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_token, account_url = load_admin_config()
    if not api_token:
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥—á–∏–∫
    debugger = DebugTaskManager(account_url, api_token)
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É—é API —Ñ–∏–ª—å—Ç—Ä—ã...")
    debugger.debug_api_filters()
    
    print("\n" + "="*60)
    user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1): ").strip()
    
    if user_id:
        debugger.test_specific_user(user_id)
    
    print("\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
