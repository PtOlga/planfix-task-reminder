#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å config.ini
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
"""

import os
import sys
from pathlib import Path
import configparser

def diagnose_config():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONFIG.INI")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    script_dir = Path(__file__).parent.absolute()
    current_dir = Path.cwd()
    
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print()
    
    # –ò—â–µ–º config.ini
    config_paths = [
        current_dir / 'config.ini',
        script_dir / 'config.ini',
        Path('config.ini')
    ]
    
    config_found = None
    
    for i, path in enumerate(config_paths, 1):
        print(f"üîç –ü—É—Ç—å {i}: {path}")
        print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: {path.absolute()}")
        print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {path.exists()}")
        
        if path.exists():
            try:
                size = path.stat().st_size
                print(f"   ‚úÖ –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                config_found = path
                break
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print()
    
    if not config_found:
        print("üö® –§–ê–ô–õ CONFIG.INI –ù–ï –ù–ê–ô–î–ï–ù!")
        
        print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({current_dir}):")
        try:
            for item in sorted(current_dir.iterdir()):
                if item.is_file():
                    print(f"   üìÑ {item.name}")
                else:
                    print(f"   üìÅ {item.name}/")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        if current_dir != script_dir:
            print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ ({script_dir}):")
            try:
                for item in sorted(script_dir.iterdir()):
                    if item.is_file():
                        print(f"   üìÑ {item.name}")
                    else:
                        print(f"   üìÅ {item.name}/")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        return False
    
    print(f"‚úÖ –ù–ê–ô–î–ï–ù CONFIG.INI: {config_found}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    print(f"\nüìñ –°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê:")
    print("-" * 30)
    try:
        with open(config_found, 'r', encoding='utf-8') as f:
            content = f.read()
            print(content)
    except UnicodeDecodeError:
        try:
            with open(config_found, 'r', encoding='cp1251') as f:
                content = f.read()
                print(content)
                print("‚ö†Ô∏è  –§–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ CP1251")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    print("-" * 30)
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥
    print(f"\nüîß –ü–ê–†–°–ò–ù–ì –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    config = configparser.ConfigParser()
    
    encodings = ['utf-8', 'cp1251', 'windows-1251']
    parsed = False
    
    for encoding in encodings:
        try:
            print(f"   –ü—Ä–æ–±—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: {encoding}")
            config.read(str(config_found), encoding=encoding)
            
            sections = config.sections()
            print(f"   ‚úÖ –°–µ–∫—Ü–∏–∏: {sections}")
            
            if 'Planfix' in sections:
                api_token = config.get('Planfix', 'api_token', fallback='')
                account_url = config.get('Planfix', 'account_url', fallback='')
                filter_id = config.get('Planfix', 'filter_id', fallback='')
                user_id = config.get('Planfix', 'user_id', fallback='')
                
                print(f"   API Token: {'***' + api_token[-4:] if len(api_token) > 4 else '–ù–ï –ó–ê–î–ê–ù'}")
                print(f"   Account URL: {account_url}")
                print(f"   Filter ID: {filter_id if filter_id else '–ù–ï –ó–ê–î–ê–ù'}")
                print(f"   User ID: {user_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                issues = []
                
                if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', 'YOUR_API_TOKEN']:
                    issues.append("API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
                if not account_url:
                    issues.append("Account URL –Ω–µ –∑–∞–¥–∞–Ω")
                elif not account_url.endswith('/rest'):
                    issues.append("Account URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /rest")
                
                if not filter_id and not user_id:
                    issues.append("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –ª–∏–±–æ filter_id, –ª–∏–±–æ user_id")
                
                if issues:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–´:")
                    for issue in issues:
                        print(f"      ‚Ä¢ {issue}")
                    return False
                else:
                    print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
                    parsed = True
                    break
            else:
                print(f"   ‚ùå –°–µ–∫—Ü–∏—è [Planfix] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å {encoding}: {e}")
    
    if not parsed:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –†–ê–°–ü–ê–†–°–ò–¢–¨ –ö–û–ù–§–ò–ì!")
        return False
    
    print(f"\nüéâ –í–°–Å –í –ü–û–†–Ø–î–ö–ï!")
    print(f"   –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {config_found}")
    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print(f"   –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    
    return True

if __name__ == "__main__":
    try:
        diagnose_config()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")