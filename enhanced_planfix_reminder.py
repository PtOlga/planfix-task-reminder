import requests
import time
from plyer import notification
import datetime
import sys
import configparser
import os
import json
from typing import List, Dict, Any
import tkinter as tk
from tkinter import ttk
import threading
import winsound
import webbrowser
from urllib.parse import quote
import queue

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---  
CHECK_INTERVAL_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
toast_queue = queue.Queue()
# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
active_windows = []
# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á
closed_tasks = {}  # task_id: {'closed_time': datetime, 'snooze_until': datetime, 'auto_closed': bool}

class ToastNotification:
    """
    –ö–∞—Å—Ç–æ–º–Ω–æ–µ Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    """
    def __init__(self, title: str, message: str, category: str, task_id: str = None):
        self.title = title
        self.message = message
        self.category = category
        self.task_id = task_id
        self.root = None
        self.is_closed = False
        self.drag_data = {"x": 0, "y": 0}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.styles = {
            'overdue': {
                'bg_color': '#FF4444',
                'text_color': 'white',
                'border_color': '#CC0000',
                'duration': None,  # –í–∏—Å–∏—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–∫—Ä–æ—é—Ç
                'sound': True,
                'sound_type': 'critical'
            },
            'urgent': {
                'bg_color': '#FF8800',
                'text_color': 'white',
                'border_color': '#CC4400', 
                'duration': None,  # –¢–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤–∏—Å–∏—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–∫—Ä–æ—é—Ç
                'sound': True,
                'sound_type': 'warning'
            },
            'current': {
                'bg_color': '#0066CC',
                'text_color': 'white',
                'border_color': '#003388',
                'duration': None,  # –ò –æ–±—ã—á–Ω—ã–µ —Ç–æ–∂–µ –≤–∏—Å—è—Ç
                'sound': False,
                'sound_type': None
            }
        }
        
    def create_window(self, master_root):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–ª–µ–≤–µ–ª –æ–∫–Ω–æ
        self.root = tk.Toplevel(master_root)
        self.root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.root.overrideredirect(True)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –æ–∫–Ω–∞
        self.root.attributes('-topmost', True)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
        self.root.attributes('-alpha', 0.95)  # –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        style = self.styles.get(self.category, self.styles['current'])
        
        # –†–∞–∑–º–µ—Ä—ã
        window_width = 320
        window_height = 140
        
        # –ü–æ–∑–∏—Ü–∏—è - –∫–∞—Å–∫–∞–¥–æ–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
        x, y = self._calculate_position(window_width, window_height)
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–∞–º–∫–æ–π
        container = tk.Frame(
            self.root, 
            bg=style['border_color'], 
            relief='raised',
            bd=2
        )
        container.pack(fill='both', expand=True, padx=2, pady=2)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ (–¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
        title_bar = tk.Frame(container, bg=style['bg_color'], height=25)
        title_bar.pack(fill='x', padx=1, pady=(1, 0))
        title_bar.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        category_icon = {
            'overdue': 'üî¥',
            'urgent': 'üü°',
            'current': 'üìã'
        }.get(self.category, 'üìã')
        
        icon_label = tk.Label(
            title_bar,
            text=category_icon,
            font=('Arial', 10),
            fg=style['text_color'],
            bg=style['bg_color']
        )
        icon_label.pack(side='left', padx=(5, 0), pady=2)
        
        # ID –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        task_id_label = tk.Label(
            title_bar,
            text=f"#{self.task_id}" if self.task_id else "",
            font=('Arial', 8),
            fg=style['text_color'],
            bg=style['bg_color']
        )
        task_id_label.pack(side='left', padx=(5, 0), pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = tk.Button(
            title_bar,
            text="‚úï",
            font=('Arial', 8, 'bold'),
            command=self._close,
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        close_btn.pack(side='right', padx=(0, 5), pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ "pin" –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        pin_btn = tk.Button(
            title_bar,
            text="üìå",
            font=('Arial', 6),
            command=self._toggle_pin,
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        pin_btn.pack(side='right', padx=(0, 2), pady=2)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
        title_bar.bind("<Button-1>", self._start_drag)
        title_bar.bind("<B1-Motion>", self._on_drag)
        icon_label.bind("<Button-1>", self._start_drag)
        icon_label.bind("<B1-Motion>", self._on_drag)
        task_id_label.bind("<Button-1>", self._start_drag) 
        task_id_label.bind("<B1-Motion>", self._on_drag)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = tk.Frame(container, bg=style['bg_color'], padx=8, pady=5)
        content_frame.pack(fill='both', expand=True, padx=1, pady=(0, 1))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_title = self.title.split(': ', 1)[-1] if ': ' in self.title else self.title
        title_label = tk.Label(
            content_frame,
            text=task_title,
            font=('Arial', 9, 'bold'),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        title_label.pack(fill='x', pady=(0, 3))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ (–ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏)
        message_lines = self.message.split('\n')[:2]
        message_text = '\n'.join(message_lines)
        
        info_label = tk.Label(
            content_frame,
            text=message_text,
            font=('Arial', 7),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        info_label.pack(fill='x', pady=(0, 5))
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = tk.Frame(content_frame, bg=style['bg_color'])
        button_frame.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if self.task_id:
            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"
            open_btn = tk.Button(
                button_frame,
                text="–û—Ç–∫—Ä—ã—Ç—å",
                font=('Arial', 7),
                command=self._open_task,
                bg='white',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            open_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ª–æ–∂–∏—Ç—å" –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏ —Å—Ä–æ—á–Ω—ã—Ö
        if self.category in ['overdue', 'urgent']:
            snooze_btn = tk.Button(
                button_frame,
                text="15–º–∏–Ω",
                font=('Arial', 7),
                command=self._snooze,
                bg='lightgray',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            snooze_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ" –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        remind_btn = tk.Button(
            button_frame,
            text="1—á",
            font=('Arial', 7),
            command=self._remind_later,
            bg='lightyellow',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        remind_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        done_btn = tk.Button(
            button_frame,
            text="–ì–æ—Ç–æ–≤–æ",
            font=('Arial', 7),
            command=self._mark_done,
            bg='lightgreen',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        done_btn.pack(side='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω
        active_windows.append(self)
        
        # –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if style['sound']:
            threading.Thread(target=self._play_sound, args=(style['sound_type'],), daemon=True).start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        self.root.deiconify()
        
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –æ–∫–Ω–∞ –≤–∏—Å—è—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–∫—Ä–æ—é—Ç –≤—Ä—É—á–Ω—É—é
        # if style['duration']:
        #     self.root.after(style['duration'], self._auto_close)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self._animate_in()
    
    def _calculate_position(self, width, height):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞ —Å —É—á–µ—Ç–æ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω"""
        screen_width = 1920  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        screen_height = 1080
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        start_x = screen_width - width - 20
        start_y = 20
        
        # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        offset_x = 10
        offset_y = 30
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        same_category_count = len([w for w in active_windows if w.category == self.category and not w.is_closed])
        
        x = start_x - (same_category_count * offset_x)
        y = start_y + (same_category_count * offset_y)
        
        # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        if y + height > screen_height - 50:
            y = 20  # –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            x = start_x - 200  # –°–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ
        
        return x, y
    
    def _start_drag(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.drag_data["x"] = event.x_root - self.root.winfo_x()
        self.drag_data["y"] = event.y_root - self.root.winfo_y()
    
    def _on_drag(self, event):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        x = event.x_root - self.drag_data["x"]
        y = event.y_root - self.drag_data["y"]
        self.root.geometry(f"+{x}+{y}")
    
    def _toggle_pin(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        current_topmost = self.root.attributes('-topmost')
        self.root.attributes('-topmost', not current_topmost)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    
    def _animate_in(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞"""
        alpha = 0.0
        def fade_in():
            nonlocal alpha
            if self.root and not self.is_closed:
                alpha += 0.15
                if alpha <= 0.95:
                    try:
                        self.root.attributes('-alpha', alpha)
                        self.root.after(40, fade_in)
                    except tk.TclError:
                        pass
        fade_in()
    
    def _play_sound(self, sound_type: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"""
        try:
            if sound_type == 'critical':
                # –î–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö - 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
                for _ in range(3):
                    winsound.MessageBeep(winsound.MB_ICONHAND)
                    time.sleep(0.3)
            elif sound_type == 'warning':
                # –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∑–≤—É–∫
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")
    
    def _open_task(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        if self.task_id:
            task_url = f"https://l-s.planfix.com/task/{self.task_id}/"
            try:
                webbrowser.open(task_url)
                print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–¥–∞—á—É {self.task_id} –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ
    
    def _snooze(self):
        """–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ 15 –º–∏–Ω—É—Ç"""
        print(f"‚è∞ –ó–∞–¥–∞—á–∞ {self.task_id} –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç")
        if self.task_id:
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
            snooze_until = datetime.datetime.now() + datetime.timedelta(minutes=15)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
        self._close()
    
    def _remind_later(self):
        """–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 1 —á–∞—Å)"""
        print(f"üïê –ó–∞–¥–∞—á–∞ {self.task_id} - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 1 —á–∞—Å")
        if self.task_id:
            snooze_until = datetime.datetime.now() + datetime.timedelta(hours=1)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
        self._close()
    
    def _mark_done(self):
        """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é"""
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ {self.task_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è")
        if self.task_id:
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': None,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
                'auto_closed': False
            }
        self._close()
    
    def _close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.is_closed = True
        
        # –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–æ–π X - —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if self.task_id and self.task_id not in closed_tasks:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if self.category == 'overdue':
                reshow_minutes = 5  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ - —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            elif self.category == 'urgent':
                reshow_minutes = 15  # –°—Ä–æ—á–Ω—ã–µ - —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç  
            else:
                reshow_minutes = 30  # –û–±—ã—á–Ω—ã–µ - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                
            snooze_until = datetime.datetime.now() + datetime.timedelta(minutes=reshow_minutes)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
            print(f"üîÑ –ó–∞–¥–∞—á–∞ {self.task_id} –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {reshow_minutes} –º–∏–Ω—É—Ç")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω
        if self in active_windows:
            active_windows.remove(self)
        
        if self.root:
            try:
                self.root.destroy()
            except tk.TclError:
                pass
    
    def _auto_close(self):
        """
        –ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –æ–∫–Ω–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        pass

class ToastManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root.title("Planfix Reminder")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 100–º—Å
        self.check_queue()
        
    def check_queue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            while True:
                toast = toast_queue.get_nowait()
                toast.create_window(self.root)
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, self.check_queue)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.root.mainloop()

def should_show_notification(task_id: str, category: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    if not task_id:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö
    if task_id not in closed_tasks:
        return True
    
    task_info = closed_tasks[task_id]
    now = datetime.datetime.now()
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ
    if task_info['snooze_until'] and now < task_info['snooze_until']:
        return False
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ - —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if task_info['snooze_until'] and now >= task_info['snooze_until']:
        del closed_tasks[task_id]
        print(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        return True
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–ì–æ—Ç–æ–≤–æ" (snooze_until = None)
    if not task_info['snooze_until']:
        return False
    
    return False

def cleanup_old_closed_tasks():
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    """
    now = datetime.datetime.now()
    to_remove = []
    
    for task_id, task_info in closed_tasks.items():
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        if now - task_info['closed_time'] > datetime.timedelta(hours=24):
            to_remove.append(task_id)
    
    for task_id in to_remove:
        del closed_tasks[task_id]
        print(f"üßπ –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")

def get_notification_summary():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
    """
    now = datetime.datetime.now()
    active_count = len([w for w in active_windows if not w.is_closed])
    snoozed_count = len([info for info in closed_tasks.values() 
                        if info['snooze_until'] and now < info['snooze_until']])
    done_count = len([info for info in closed_tasks.values() 
                     if not info['snooze_until']])
    
    return {
        'active': active_count,
        'snoozed': snoozed_count, 
        'done': done_count
    }
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    """
    try:
        toast = ToastNotification(title, message, category, task_id)
        toast_queue.put(toast)
        print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üçû TOAST {category.upper()}: {title}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            notification.notify(
                title=title,
                message=message,
                app_name="Planfix Reminder",
                timeout=10
            )
        except:
            pass

class PlanfixAPI:
    def __init__(self, account_url: str, api_token: str):
        self.account_url = account_url.rstrip('/')
        self.api_token = api_token
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        })
        self.user_id = None
        self.user_name = None

    def get_current_user_id(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ /user/list
        """
        try:
            payload = {
                'offset': 0,
                'pageSize': 100,
                'fields': 'id,name,midname,lastname'
            }
            response = self.session.post(
                f"{self.account_url}/user/list",
                json=payload,
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                users = data.get('users', [])
                if users:
                    self.user_id = users[0].get('id')
                    self.user_name = users[0].get('name', 'Unknown')
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_name} (ID: {self.user_id})")
                    return self.user_id
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ /user/list")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_current_user_tasks(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ Planfix API
        """
        if not self.user_id:
            self.get_current_user_id()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_name} (ID: {self.user_id})")
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä")
        
        try:
            all_user_tasks = []
            
            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
            filter_configs = [
                {
                    "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                    "filters": [
                        {
                            "type": 2,
                            "operator": "equal",
                            "value": f"user:{self.user_id}"
                        }
                    ]
                },
                {
                    "name": "–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫", 
                    "filters": [
                        {
                            "type": 3,
                            "operator": "equal",
                            "value": f"user:{self.user_id}"
                        }
                    ]
                },
                {
                    "name": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä/–£—á–∞—Å—Ç–Ω–∏–∫",
                    "filters": [
                        {
                            "type": 4,
                            "operator": "equal", 
                            "value": f"user:{self.user_id}"
                        }
                    ]
                }
            ]
            
            task_ids_seen = set()
            
            for config in filter_configs:
                try:
                    payload = {
                        "offset": 0,
                        "pageSize": 100,
                        "filters": config["filters"],
                        "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
                    }
                    
                    response = self.session.post(
                        f"{self.account_url}/task/list",
                        json=payload,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('result') != 'fail':
                            tasks = data.get('tasks', [])
                            print(f"   {config['name']}: –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
                            
                            for task in tasks:
                                task_id = task.get('id')
                                if task_id not in task_ids_seen:
                                    task_ids_seen.add(task_id)
                                    all_user_tasks.append(task)
                        else:
                            print(f"   {config['name']}: {data.get('error', '–æ—à–∏–±–∫–∞ API')}")
                    else:
                        print(f"   {config['name']}: HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"   {config['name']}: –æ—à–∏–±–∫–∞ - {e}")
            
            if not all_user_tasks:
                print("üîÑ –§–∏–ª—å—Ç—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é")
                all_user_tasks = self._get_all_tasks_and_filter_manually()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = []
            closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞']
            
            for task in all_user_tasks:
                status = task.get('status', {})
                status_name = status.get('name', '') if isinstance(status, dict) else str(status)
                
                if status_name not in closed_statuses:
                    active_tasks.append(task)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è {self.user_name}: {len(active_tasks)}")
            
            if active_tasks:
                overdue_count = 0
                with_deadline = 0
                
                for task in active_tasks:
                    if task.get('overdue'):
                        overdue_count += 1
                    if task.get('endDateTime'):
                        with_deadline += 1
                
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {overdue_count}")
                print(f"   üìÖ –° –¥–µ–¥–ª–∞–π–Ω–æ–º: {with_deadline}")
                print(f"   üìù –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞: {len(active_tasks) - with_deadline}")
            
            return active_tasks
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}")
            return []

    def _get_all_tasks_and_filter_manually(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é
        """
        try:
            payload = {
                "offset": 0,
                "pageSize": 200,
                "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                all_tasks = data.get('tasks', [])
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
                
                user_tasks = []
                user_id_str = str(self.user_id)
                
                for task in all_tasks:
                    is_user_involved = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                    assignees = task.get('assignees', {})
                    if assignees:
                        users = assignees.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants = task.get('participants', {})
                    if participants and not is_user_involved:
                        users = participants.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤
                    auditors = task.get('auditors', {})
                    if auditors and not is_user_involved:
                        users = auditors.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                    assigner = task.get('assigner', {})
                    if assigner and not is_user_involved:
                        if str(assigner.get('id', '')) == user_id_str:
                            is_user_involved = True
                    
                    if is_user_involved:
                        user_tasks.append(task)
                
                print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_tasks)}")
                return user_tasks
            else:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return []
      
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
        """
        try:
            payload = {
                "offset": 0,
                "pageSize": 1,
                "fields": "id,name"
            }
            response = self.session.post(
                f"{self.account_url}/user/list",
                json=payload,
                timeout=10
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('result') == 'fail':
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code} - {response.text[:500]}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

def categorize_tasks(tasks: List[Dict]) -> Dict[str, List[Dict]]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ
    """
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    
    categorized = {
        'overdue': [],
        'urgent': [],
        'current': []
    }
    
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞']
    
    for task in tasks:
        try:
            status = task.get('status', {})
            status_name = status.get('name', '') if isinstance(status, dict) else str(status)
            
            if status_name in closed_statuses:
                continue
            
            if task.get('overdue', False):
                categorized['overdue'].append(task)
                continue
            
            end_date_info = task.get('endDateTime')
            end_date = None
            
            if end_date_info:
                if isinstance(end_date_info, dict):
                    date_str = (end_date_info.get('datetime') or 
                              end_date_info.get('date') or 
                              end_date_info.get('dateTimeUtcSeconds'))
                else:
                    date_str = str(end_date_info)
                
                if date_str:
                    try:
                        if 'T' in date_str:
                            end_date = datetime.datetime.fromisoformat(date_str.replace('Z', '+00:00')).date()
                        elif '-' in date_str:
                            formats_to_try = ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                        elif '.' in date_str:
                            formats_to_try = ['%d.%m.%Y', '%d.%m.%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task.get('id')}: {e}")
            
            if not end_date:
                end_date_str = task.get('endDate', '')
                if end_date_str:
                    try:
                        if 'T' in end_date_str:
                            end_date = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00')).date()
                        else:
                            for date_format in ['%Y-%m-%d', '%d-%m-%Y', '%d.%m.%Y']:
                                try:
                                    end_date = datetime.datetime.strptime(end_date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception:
                        pass
            
            if end_date:
                if end_date < today:
                    categorized['overdue'].append(task)
                elif end_date <= tomorrow:
                    categorized['urgent'].append(task)
                else:
                    categorized['current'].append(task)
            else:
                categorized['current'].append(task)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.get('id', 'Unknown')}: {e}")
            categorized['current'].append(task)
    
    return categorized

def show_toast_notification(title: str, message: str, category: str, task_id: str = None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if not should_show_notification(task_id, category):
        return False
    
    try:
        toast = ToastNotification(title, message, category, task_id)
        toast_queue.put(toast)
        print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üçû TOAST {category.upper()}: {title}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            notification.notify(
                title=title,
                message=message,
                app_name="Planfix Reminder",
                timeout=10
            )
            return True
        except:
            return False

def format_task_message(task: Dict, category: str) -> tuple:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    task_name = task.get('name', '–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_date_info = task.get('endDateTime')
    end_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    
    if end_date_info:
        if isinstance(end_date_info, dict):
            end_date_str = (end_date_info.get('date') or 
                          end_date_info.get('datetime') or 
                          '–£–∫–∞–∑–∞–Ω–∞')
        else:
            end_date_str = str(end_date_info)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    assignees = task.get('assignees', {})
    assignee_names = []
    if assignees:
        users = assignees.get('users', [])
        for user in users:
            name = user.get('name', f"ID:{user.get('id')}")
            assignee_names.append(name)
    
    assignee_text = ', '.join(assignee_names) if assignee_names else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_date = end_date_str
    if end_date_str and end_date_str not in ['–ù–µ —É–∫–∞–∑–∞–Ω–∞', '–£–∫–∞–∑–∞–Ω–∞']:
        try:
            if 'T' in end_date_str:
                date_obj = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime('%d.%m.%Y')
            elif '-' in end_date_str and len(end_date_str) >= 8:
                for date_format in ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']:
                    try:
                        date_obj = datetime.datetime.strptime(end_date_str, date_format)
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                        break
                    except ValueError:
                        continue
        except:
            formatted_date = end_date_str
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_prefix = {
        'overdue': 'üî¥ –ü–†–û–°–†–û–ß–ï–ù–û',
        'urgent': 'üü° –°–†–û–ß–ù–û', 
        'current': 'üìã –ó–ê–î–ê–ß–ê'
    }.get(category, 'üìã –ó–ê–î–ê–ß–ê')
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Toast
    safe_limit = 45  # –ï—â–µ –∫–æ—Ä–æ—á–µ –¥–ª—è Toast
    separator = ": "
    
    prefix_and_separator_length = len(title_prefix) + len(separator)
    max_task_name_length = safe_limit - prefix_and_separator_length
    
    if max_task_name_length <= 3:
        task_name_short = "..."
    elif len(task_name) > max_task_name_length:
        task_name_short = task_name[:max_task_name_length-3] + "..."
    else:
        task_name_short = task_name
    
    title = f"{title_prefix}{separator}{task_name_short}"
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [f"üìÖ {formatted_date}", f"üë§ {assignee_text}"]
    message = '\n'.join(message_parts)
    
    return title, message

def load_config() -> tuple:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    """
    config = configparser.ConfigParser()
    config_file_path = 'config.ini'
    
    if not os.path.exists(config_file_path):
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.ini' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    encodings_to_try = ['utf-8', 'cp1251', 'windows-1251', 'latin-1']
    
    for encoding in encodings_to_try:
        try:
            config.read(config_file_path, encoding=encoding)
            api_token = config['Planfix']['api_token']
            account_url = config['Planfix']['account_url']
            check_interval = int(config.get('Settings', 'check_interval', fallback=300))
            notification_settings = {
                'current': config.getboolean('Settings', 'notify_current', fallback=True),
                'urgent': config.getboolean('Settings', 'notify_urgent', fallback=True),
                'overdue': config.getboolean('Settings', 'notify_overdue', fallback=True)
            }
            if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', '–í–ê–®_API_–¢–û–ö–ï–ù_–ó–î–ï–°–¨']:
                print("‚ùå API-—Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.ini")
                sys.exit(1)
            if not account_url.endswith('/rest'):
                print(f"‚ö†Ô∏è account_url '{account_url}' –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/rest'")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
            return api_token, account_url, check_interval, notification_settings
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.ini")
    sys.exit(1)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ Planfix Reminder —Å Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏...")
    api_token, account_url, check_interval, notification_settings = load_config()
    planfix = PlanfixAPI(account_url, api_token)
    
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫")
    print(f"   - URL –∞–∫–∫–∞—É–Ω—Ç–∞: {account_url}")
    print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_settings}")
    
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Planfix...")
    if not planfix.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
        sys.exit(1)
    
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    toast_manager = ToastManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def monitor_tasks():
        notified_tasks = set()  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º closed_tasks
        cleanup_counter = 0
        
        while True:
            try:
                tasks = planfix.get_current_user_tasks()
                if not tasks:
                    print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    time.sleep(check_interval)
                    continue
                    
                categorized_tasks = categorize_tasks(tasks)
                stats = {k: len(v) for k, v in categorized_tasks.items()}
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
                notification_stats = get_notification_summary()
                
                print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üìä –ó–∞–¥–∞—á: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {stats['overdue']}, —Å—Ä–æ—á–Ω–æ {stats['urgent']}, —Ç–µ–∫—É—â–∏–µ {stats['current']}")
                print(f"   üçû –û–∫–Ω–∞: –∞–∫—Ç–∏–≤–Ω—ã—Ö {notification_stats['active']}, –æ—Ç–ª–æ–∂–µ–Ω–æ {notification_stats['snoozed']}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ {notification_stats['done']}")
                
                new_notifications = 0
                for category, tasks_list in categorized_tasks.items():
                    if not notification_settings.get(category, True):
                        continue
                        
                    for task in tasks_list:
                        task_id = str(task.get('id'))
                        title, message = format_task_message(task, category)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if show_toast_notification(title, message, category, task_id):
                            new_notifications += 1
                            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                
                if new_notifications == 0:
                    print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] ‚úÖ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
                else:
                    print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üçû –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_notifications} Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                cleanup_counter += 1
                if cleanup_counter >= 10:
                    cleanup_old_closed_tasks()
                    cleanup_counter = 0
                
                time.sleep(check_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                print("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_tasks, daemon=True)
    monitor_thread.start()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        toast_manager.run()
    except KeyboardInterrupt:
        print("\nüëã Planfix Reminder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ GUI: {e}")

if __name__ == "__main__":
    main()