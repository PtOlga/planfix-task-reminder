import requests
import time
from plyer import notification
import datetime
import sys
import configparser
import os
import json
from typing import List, Dict, Any
import tkinter as tk
from tkinter import ttk
import threading
import winsound
import webbrowser
from urllib.parse import quote
import queue
import pystray
from PIL import Image, ImageDraw
import io
import base64
from pathlib import Path

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≤—Å–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.ini)
app_config = {
    'check_interval': 300,
    'max_windows_per_category': 5,
    'max_total_windows': 10,
    'notifications': {
        'current': True,
        'urgent': True,
        'overdue': True
    },
    'roles': {
        'include_assignee': True,
        'include_assigner': True,
        'include_auditor': True
    },
    'planfix': {
        'api_token': '',
        'account_url': '',
        'filter_id': None,
        'user_id': '1'
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
toast_queue = queue.Queue()
# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
active_windows = []
# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á
closed_tasks = {}  # task_id: {'closed_time': datetime, 'snooze_until': datetime, 'auto_closed': bool}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ—è
tray_icon = None
is_paused = False
pause_until = None
last_check_time = None
current_stats = {'total': 0, 'overdue': 0, 'urgent': 0}
planfix_api = None

class ToastNotification:
    """
    –ö–∞—Å—Ç–æ–º–Ω–æ–µ Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    """
    def __init__(self, title: str, message: str, category: str, task_id: str = None):
        self.title = title
        self.message = message
        self.category = category
        self.task_id = task_id
        self.root = None
        self.is_closed = False
        self.drag_data = {"x": 0, "y": 0}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.styles = {
            'overdue': {
                'bg_color': '#FF4444',
                'text_color': 'white',
                'border_color': '#CC0000',
                'duration': None,
                'sound': True,
                'sound_type': 'critical'
            },
            'urgent': {
                'bg_color': '#FF8800',
                'text_color': 'white',
                'border_color': '#CC4400', 
                'duration': None,
                'sound': True,
                'sound_type': 'warning'
            },
            'current': {
                'bg_color': '#0066CC',
                'text_color': 'white',
                'border_color': '#003388',
                'duration': None,
                'sound': False,
                'sound_type': None
            }
        }
        
    def create_window(self, master_root):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.root = tk.Toplevel(master_root)
        self.root.withdraw()
        
        self.root.overrideredirect(True)
        self.root.attributes('-topmost', True)
        self.root.attributes('-alpha', 0.95)
        
        style = self.styles.get(self.category, self.styles['current'])
        
        window_width = 320
        window_height = 140
        
        x, y = self._calculate_position(window_width, window_height)
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        container = tk.Frame(
            self.root, 
            bg=style['border_color'], 
            relief='raised',
            bd=2
        )
        container.pack(fill='both', expand=True, padx=2, pady=2)
        
        title_bar = tk.Frame(container, bg=style['bg_color'], height=25)
        title_bar.pack(fill='x', padx=1, pady=(1, 0))
        title_bar.pack_propagate(False)
        
        category_icon = {
            'overdue': 'üî¥',
            'urgent': 'üü°',
            'current': 'üìã'
        }.get(self.category, 'üìã')
        
        icon_label = tk.Label(
            title_bar,
            text=category_icon,
            font=('Arial', 10),
            fg=style['text_color'],
            bg=style['bg_color']
        )
        icon_label.pack(side='left', padx=(5, 0), pady=2)
        
        task_id_label = tk.Label(
            title_bar,
            text=f"#{self.task_id}" if self.task_id else "",
            font=('Arial', 8),
            fg=style['text_color'],
            bg=style['bg_color']
        )
        task_id_label.pack(side='left', padx=(5, 0), pady=2)
        
        close_btn = tk.Button(
            title_bar,
            text="‚úï",
            font=('Arial', 8, 'bold'),
            command=self._close,
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        close_btn.pack(side='right', padx=(0, 5), pady=2)
        
        pin_btn = tk.Button(
            title_bar,
            text="üìå",
            font=('Arial', 6),
            command=self._toggle_pin,
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        pin_btn.pack(side='right', padx=(0, 2), pady=2)
        
        title_bar.bind("<Button-1>", self._start_drag)
        title_bar.bind("<B1-Motion>", self._on_drag)
        icon_label.bind("<Button-1>", self._start_drag)
        icon_label.bind("<B1-Motion>", self._on_drag)
        task_id_label.bind("<Button-1>", self._start_drag) 
        task_id_label.bind("<B1-Motion>", self._on_drag)
        
        content_frame = tk.Frame(container, bg=style['bg_color'], padx=8, pady=5)
        content_frame.pack(fill='both', expand=True, padx=1, pady=(0, 1))
        
        task_title = self.title.split(': ', 1)[-1] if ': ' in self.title else self.title
        title_label = tk.Label(
            content_frame,
            text=task_title,
            font=('Arial', 9, 'bold'),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        title_label.pack(fill='x', pady=(0, 3))
        
        message_lines = self.message.split('\n')[:2]
        message_text = '\n'.join(message_lines)
        
        info_label = tk.Label(
            content_frame,
            text=message_text,
            font=('Arial', 7),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        info_label.pack(fill='x', pady=(0, 5))
        
        button_frame = tk.Frame(content_frame, bg=style['bg_color'])
        button_frame.pack(fill='x')
        
        if self.task_id:
            open_btn = tk.Button(
                button_frame,
                text="–û—Ç–∫—Ä—ã—Ç—å",
                font=('Arial', 7),
                command=self._open_task,
                bg='white',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            open_btn.pack(side='left', padx=(0, 3))
        
        if self.category in ['overdue', 'urgent']:
            snooze_btn = tk.Button(
                button_frame,
                text="15–º–∏–Ω",
                font=('Arial', 7),
                command=self._snooze,
                bg='lightgray',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            snooze_btn.pack(side='left', padx=(0, 3))
        
        remind_btn = tk.Button(
            button_frame,
            text="1—á",
            font=('Arial', 7),
            command=self._remind_later,
            bg='lightyellow',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        remind_btn.pack(side='left', padx=(0, 3))
        
        done_btn = tk.Button(
            button_frame,
            text="–ì–æ—Ç–æ–≤–æ",
            font=('Arial', 7),
            command=self._mark_done,
            bg='lightgreen',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        done_btn.pack(side='right')
        
        active_windows.append(self)
        
        if style['sound']:
            threading.Thread(target=self._play_sound, args=(style['sound_type'],), daemon=True).start()
        
        self.root.deiconify()
        self._animate_in()
    
    def _calculate_position(self, width, height):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞ —Å —É—á–µ—Ç–æ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω"""
        screen_width = 1920
        screen_height = 1080
        
        start_x = screen_width - width - 20
        start_y = 20
        
        offset_x = 10
        offset_y = 30
        
        same_category_count = len([w for w in active_windows if w.category == self.category and not w.is_closed])
        
        x = start_x - (same_category_count * offset_x)
        y = start_y + (same_category_count * offset_y)
        
        if y + height > screen_height - 50:
            y = 20
            x = start_x - 200
        
        return x, y
    
    def _start_drag(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.drag_data["x"] = event.x_root - self.root.winfo_x()
        self.drag_data["y"] = event.y_root - self.root.winfo_y()
    
    def _on_drag(self, event):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        x = event.x_root - self.drag_data["x"]
        y = event.y_root - self.drag_data["y"]
        self.root.geometry(f"+{x}+{y}")
    
    def _toggle_pin(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        current_topmost = self.root.attributes('-topmost')
        self.root.attributes('-topmost', not current_topmost)
    
    def _animate_in(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞"""
        alpha = 0.0
        def fade_in():
            nonlocal alpha
            if self.root and not self.is_closed:
                alpha += 0.15
                if alpha <= 0.95:
                    try:
                        self.root.attributes('-alpha', alpha)
                        self.root.after(40, fade_in)
                    except tk.TclError:
                        pass
        fade_in()
    
    def _play_sound(self, sound_type: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"""
        try:
            if sound_type == 'critical':
                for _ in range(3):
                    winsound.MessageBeep(winsound.MB_ICONHAND)
                    time.sleep(0.3)
            elif sound_type == 'warning':
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
        except Exception:
            pass
    
    def _open_task(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        if self.task_id:
            try:
                account_url = app_config['planfix']['account_url'].replace('/rest', '')
                task_url = f"{account_url}/task/{self.task_id}/"
                webbrowser.open(task_url)
            except Exception:
                task_url = f"https://planfix.com/task/{self.task_id}/"
                webbrowser.open(task_url)
    
    def _snooze(self):
        """–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ 15 –º–∏–Ω—É—Ç"""
        if self.task_id:
            snooze_until = datetime.datetime.now() + datetime.timedelta(minutes=15)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
        self._close()
    
    def _remind_later(self):
        """–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ 1 —á–∞—Å)"""
        if self.task_id:
            snooze_until = datetime.datetime.now() + datetime.timedelta(hours=1)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
        self._close()
    
    def _mark_done(self):
        """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é"""
        if self.task_id:
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': None,
                'auto_closed': False
            }
        self._close()
    
    def _close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.is_closed = True
        
        if self.task_id and self.task_id not in closed_tasks:
            if self.category == 'overdue':
                reshow_minutes = 5
            elif self.category == 'urgent':
                reshow_minutes = 15
            else:
                reshow_minutes = 30
                
            snooze_until = datetime.datetime.now() + datetime.timedelta(minutes=reshow_minutes)
            closed_tasks[self.task_id] = {
                'closed_time': datetime.datetime.now(),
                'snooze_until': snooze_until,
                'auto_closed': False
            }
        
        if self in active_windows:
            active_windows.remove(self)
        
        if self.root:
            try:
                self.root.destroy()
            except tk.TclError:
                pass

class ToastManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()
        self.root.title("Planfix Reminder")
        self.check_queue()
        
    def check_queue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            while True:
                toast = toast_queue.get_nowait()
                toast.create_window(self.root)
        except queue.Empty:
            pass
        
        self.root.after(100, self.check_queue)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.root.mainloop()

def cleanup_closed_windows():
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    """
    global active_windows
    active_windows = [w for w in active_windows if not w.is_closed]

def should_show_notification(task_id: str, category: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    if not task_id:
        return True
    
    cleanup_closed_windows()
    
    # 1. –ü–†–û–í–ï–†–Ø–ï–ú –£–ñ–ï –û–¢–ö–†–´–¢–´–ï –û–ö–ù–ê
    for window in active_windows:
        if window.task_id == task_id:
            return False
    
    # 2. –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢–´ –û–ö–û–ù
    active_count = len(active_windows)
    category_count = len([w for w in active_windows if w.category == category])
    
    if active_count >= app_config['max_total_windows']:
        return False
        
    if category_count >= app_config['max_windows_per_category']:
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö
    if task_id not in closed_tasks:
        return True
    
    task_info = closed_tasks[task_id]
    now = datetime.datetime.now()
    
    # 4. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ
    if task_info['snooze_until'] and now < task_info['snooze_until']:
        return False
    
    # 5. –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ - —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if task_info['snooze_until'] and now >= task_info['snooze_until']:
        del closed_tasks[task_id]
        return True
    
    # 6. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–ì–æ—Ç–æ–≤–æ"
    if not task_info['snooze_until']:
        return False
    
    return False

def cleanup_old_closed_tasks():
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    """
    now = datetime.datetime.now()
    to_remove = []
    
    for task_id, task_info in closed_tasks.items():
        if now - task_info['closed_time'] > datetime.timedelta(hours=24):
            to_remove.append(task_id)
    
    for task_id in to_remove:
        del closed_tasks[task_id]

class PlanfixAPI:
    def __init__(self):
        self.account_url = app_config['planfix']['account_url'].rstrip('/')
        self.api_token = app_config['planfix']['api_token']
        self.filter_id = app_config['planfix']['filter_id']
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        })

    def get_filtered_tasks(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –ò–õ–ò –ø–æ —Ä–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            if self.filter_id:
                return self._get_tasks_by_filter()
            else:
                return self._get_tasks_by_roles()
        except Exception:
            return []

    def _get_tasks_by_filter(self) -> List[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≥–æ—Ç–æ–≤–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É Planfix"""
        try:
            payload = {
                "offset": 0,
                "pageSize": 100,
                "filterId": int(self.filter_id),
                "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('result') != 'fail':
                    all_tasks = data.get('tasks', [])
                    return self._filter_active_tasks(all_tasks)
            
            return []
            
        except Exception:
            return []

    def _get_tasks_by_roles(self) -> List[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ä–æ–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = app_config['planfix']['user_id']
        all_tasks = []
        task_ids_seen = set()
        
        # 1. –ó–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨
        if app_config['roles']['include_assignee']:
            assignee_tasks = self._get_tasks_by_role_type(user_id, role_type=2)
            for task in assignee_tasks:
                task_id = task.get('id')
                if task_id not in task_ids_seen:
                    task_ids_seen.add(task_id)
                    all_tasks.append(task)
        
        # 2. –ó–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - POST–ê–ù–û–í–©–ò–ö
        if app_config['roles']['include_assigner']:
            assigner_tasks = self._get_tasks_by_role_type(user_id, role_type=3)
            for task in assigner_tasks:
                task_id = task.get('id')
                if task_id not in task_ids_seen:
                    task_ids_seen.add(task_id)
                    all_tasks.append(task)
        
        # 3. –ó–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ö–û–ù–¢–†–û–õ–ï–†/–£–ß–ê–°–¢–ù–ò–ö
        if app_config['roles']['include_auditor']:
            auditor_tasks = self._get_tasks_by_role_type(user_id, role_type=4)
            for task in auditor_tasks:
                task_id = task.get('id')
                if task_id not in task_ids_seen:
                    task_ids_seen.add(task_id)
                    all_tasks.append(task)
        
        return self._filter_active_tasks(all_tasks)

    def _get_tasks_by_role_type(self, user_id: str, role_type: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∏–ø—É —Ä–æ–ª–∏"""
        try:
            payload = {
                "offset": 0,
                "pageSize": 100,
                "filters": [
                    {
                        "type": role_type,
                        "operator": "equal",
                        "value": f"user:{user_id}"
                    }
                ],
                "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('result') != 'fail':
                    return data.get('tasks', [])
            
            return []
            
        except Exception:
            return []

    def _filter_active_tasks(self, all_tasks: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—É–±–∏—Ä–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ)"""
        active_tasks = []
        closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è']
        
        for task in all_tasks:
            status = task.get('status', {})
            status_name = status.get('name', '') if isinstance(status, dict) else str(status)
            
            if status_name not in closed_statuses:
                active_tasks.append(task)
        
        return active_tasks

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            if self.filter_id:
                payload = {
                    "offset": 0,
                    "pageSize": 1,
                    "filterId": int(self.filter_id),
                    "fields": "id,name"
                }
            else:
                payload = {
                    "offset": 0,
                    "pageSize": 1,
                    "fields": "id,name"
                }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('result') == 'fail':
                    return False
                return True
            else:
                return False
        except Exception:
            return False

def categorize_tasks(tasks: List[Dict]) -> Dict[str, List[Dict]]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ
    """
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    
    categorized = {
        'overdue': [],
        'urgent': [],
        'current': []
    }
    
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è']
    
    for task in tasks:
        try:
            status = task.get('status', {})
            status_name = status.get('name', '') if isinstance(status, dict) else str(status)
            
            if status_name in closed_statuses:
                continue
            
            if task.get('overdue', False):
                categorized['overdue'].append(task)
                continue
            
            end_date_info = task.get('endDateTime')
            end_date = None
            
            if end_date_info:
                if isinstance(end_date_info, dict):
                    date_str = (end_date_info.get('datetime') or 
                              end_date_info.get('date') or 
                              end_date_info.get('dateTimeUtcSeconds'))
                else:
                    date_str = str(end_date_info)
                
                if date_str:
                    try:
                        if 'T' in date_str:
                            end_date = datetime.datetime.fromisoformat(date_str.replace('Z', '+00:00')).date()
                        elif '-' in date_str:
                            formats_to_try = ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                        elif '.' in date_str:
                            formats_to_try = ['%d.%m.%Y', '%d.%m.%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception:
                        pass
            
            if not end_date:
                end_date_str = task.get('endDate', '')
                if end_date_str:
                    try:
                        if 'T' in end_date_str:
                            end_date = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00')).date()
                        else:
                            for date_format in ['%Y-%m-%d', '%d-%m-%Y', '%d.%m.%Y']:
                                try:
                                    end_date = datetime.datetime.strptime(end_date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception:
                        pass
            
            if end_date:
                if end_date < today:
                    categorized['overdue'].append(task)
                elif end_date <= tomorrow:
                    categorized['urgent'].append(task)
                else:
                    categorized['current'].append(task)
            else:
                categorized['current'].append(task)
                
        except Exception:
            categorized['current'].append(task)
    
    return categorized

def show_toast_notification(title: str, message: str, category: str, task_id: str = None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    """
    if not should_show_notification(task_id, category):
        return False
    
    try:
        toast = ToastNotification(title, message, category, task_id)
        toast_queue.put(toast)
        return True
    except Exception:
        try:
            notification.notify(
                title=title,
                message=message,
                app_name="Planfix Reminder",
                timeout=10
            )
            return True
        except Exception:
            return False

def format_task_message(task: Dict, category: str) -> tuple:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    task_name = task.get('name', '–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    
    end_date_info = task.get('endDateTime')
    end_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    
    if end_date_info:
        if isinstance(end_date_info, dict):
            end_date_str = (end_date_info.get('date') or 
                          end_date_info.get('datetime') or 
                          '–£–∫–∞–∑–∞–Ω–∞')
        else:
            end_date_str = str(end_date_info)
    
    assignees = task.get('assignees', {})
    assignee_names = []
    if assignees:
        users = assignees.get('users', [])
        for user in users:
            name = user.get('name', f"ID:{user.get('id')}")
            assignee_names.append(name)
    
    assignee_text = ', '.join(assignee_names) if assignee_names else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    
    formatted_date = end_date_str
    if end_date_str and end_date_str not in ['–ù–µ —É–∫–∞–∑–∞–Ω–∞', '–£–∫–∞–∑–∞–Ω–∞']:
        try:
            if 'T' in end_date_str:
                date_obj = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime('%d.%m.%Y')
            elif '-' in end_date_str and len(end_date_str) >= 8:
                for date_format in ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']:
                    try:
                        date_obj = datetime.datetime.strptime(end_date_str, date_format)
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                        break
                    except ValueError:
                        continue
        except Exception:
            formatted_date = end_date_str
    
    title_prefix = {
        'overdue': 'üî¥ –ü–†–û–°–†–û–ß–ï–ù–û',
        'urgent': 'üü° –°–†–û–ß–ù–û', 
        'current': 'üìã –ó–ê–î–ê–ß–ê'
    }.get(category, 'üìã –ó–ê–î–ê–ß–ê')
    
    safe_limit = 45
    separator = ": "
    
    prefix_and_separator_length = len(title_prefix) + len(separator)
    max_task_name_length = safe_limit - prefix_and_separator_length
    
    if max_task_name_length <= 3:
        task_name_short = "..."
    elif len(task_name) > max_task_name_length:
        task_name_short = task_name[:max_task_name_length-3] + "..."
    else:
        task_name_short = task_name
    
    title = f"{title_prefix}{separator}{task_name_short}"
    
    message_parts = [f"üìÖ {formatted_date}", f"üë§ {assignee_text}"]
    message = '\n'.join(message_parts)
    
    return title, message

def load_config() -> bool:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é app_config
    –° –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    """
    global app_config
    
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –ö–û–ù–§–ò–ì–ê ===")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
    script_dir = Path(__file__).parent.absolute()
    current_dir = Path.cwd()
    
    print(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    print()
    
    config_paths = [
        current_dir / 'config.ini',
        script_dir / 'config.ini',
        Path('config.ini'),
    ]
    
    config_file_path = None
    
    # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    for i, path in enumerate(config_paths, 1):
        print(f"üîç –ü—É—Ç—å {i}: {path}")
        print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: {path.absolute()}")
        print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {path.exists()}")
        
        if path.exists():
            try:
                size = path.stat().st_size
                print(f"   ‚úÖ –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                config_file_path = path
                break
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print()
    
    if not config_file_path:
        print("üö® –§–ê–ô–õ CONFIG.INI –ù–ï –ù–ê–ô–î–ï–ù!")
        
        print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({current_dir}):")
        try:
            for item in sorted(current_dir.iterdir()):
                if item.is_file():
                    print(f"   üìÑ {item.name}")
                else:
                    print(f"   üìÅ {item.name}/")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        if current_dir != script_dir:
            print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ ({script_dir}):")
            try:
                for item in sorted(script_dir.iterdir()):
                    if item.is_file():
                        print(f"   üìÑ {item.name}")
                    else:
                        print(f"   üìÅ {item.name}/")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        return False
    
    print(f"‚úÖ –ù–ê–ô–î–ï–ù CONFIG.INI: {config_file_path}")
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    config = configparser.ConfigParser()
    encodings_to_try = ['utf-8', 'cp1251', 'windows-1251', 'latin-1']
    
    config_loaded = False
    for encoding in encodings_to_try:
        try:
            print(f"–ü—Ä–æ–±—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: {encoding}")
            config.read(str(config_file_path), encoding=encoding)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            sections = config.sections()
            print(f"  –ù–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏: {sections}")
            
            if 'Planfix' not in sections:
                print(f"  ‚ùå –°–µ–∫—Ü–∏—è [Planfix] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            api_token = config.get('Planfix', 'api_token', fallback='')
            account_url = config.get('Planfix', 'account_url', fallback='')
            
            print(f"  API Token: {'***' + api_token[-4:] if len(api_token) > 4 else '–ù–ï –ó–ê–î–ê–ù'}")
            print(f"  Account URL: {account_url}")
            
            if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', 'YOUR_API_TOKEN', 'YOUR_API_TOKEN_HERE']:
                print(f"  ‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                continue
                
            if not account_url.endswith('/rest'):
                print(f"  ‚ùå URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /rest")
                continue
            
            config_loaded = True
            print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
            break
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    
    if not config_loaded:
        print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ì–†–£–ó–ò–¢–¨ –ö–û–ù–§–ò–ì!")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        app_config['planfix']['api_token'] = config['Planfix']['api_token']
        app_config['planfix']['account_url'] = config['Planfix']['account_url']
        app_config['planfix']['filter_id'] = config.get('Planfix', 'filter_id', fallback=None)
        app_config['planfix']['user_id'] = config.get('Planfix', 'user_id', fallback='1')
        
        # –û—á–∏—â–∞–µ–º filter_id –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if app_config['planfix']['filter_id'] == '':
            app_config['planfix']['filter_id'] = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        app_config['check_interval'] = int(config.get('Settings', 'check_interval', fallback=300))
        app_config['max_windows_per_category'] = int(config.get('Settings', 'max_windows_per_category', fallback=5))
        app_config['max_total_windows'] = int(config.get('Settings', 'max_total_windows', fallback=10))
        
        app_config['notifications']['current'] = config.getboolean('Settings', 'notify_current', fallback=True)
        app_config['notifications']['urgent'] = config.getboolean('Settings', 'notify_urgent', fallback=True)
        app_config['notifications']['overdue'] = config.getboolean('Settings', 'notify_overdue', fallback=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
        if config.has_section('Roles'):
            app_config['roles']['include_assignee'] = config.getboolean('Roles', 'include_assignee', fallback=True)
            app_config['roles']['include_assigner'] = config.getboolean('Roles', 'include_assigner', fallback=True)
            app_config['roles']['include_auditor'] = config.getboolean('Roles', 'include_auditor', fallback=True)
        
        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"   Filter ID: {app_config['planfix']['filter_id'] or '–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø'}")
        print(f"   User ID: {app_config['planfix']['user_id']}")
        print("=" * 35)
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

# ========================================
# –§–£–ù–ö–¶–ò–ò –°–ò–°–¢–ï–ú–ù–û–ì–û –¢–†–ï–Ø
# ========================================

def create_tray_icon():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
    draw = ImageDraw.Draw(image)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    global current_stats, is_paused
    
    if is_paused:
        color = (128, 128, 128)  # –°–µ—Ä—ã–π - –Ω–∞ –ø–∞—É–∑–µ
    elif current_stats['overdue'] > 0:
        color = (255, 68, 68)    # –ö—Ä–∞—Å–Ω—ã–π - –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
    elif current_stats['urgent'] > 0:
        color = (255, 136, 0)    # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ
    else:
        color = (0, 200, 0)      # –ó–µ–ª–µ–Ω—ã–π - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    
    # –†–∏—Å—É–µ–º –∫—Ä—É–≥
    draw.ellipse([8, 8, 56, 56], fill=color, outline=(255, 255, 255), width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É P
    try:
        from PIL import ImageFont
        font = ImageFont.truetype("arial.ttf", 24)
    except:
        font = None
    
    draw.text((32, 32), "P", fill=(255, 255, 255), anchor="mm", font=font)
    
    return image

def update_tray_icon():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ"""
    global tray_icon
    if tray_icon:
        tray_icon.icon = create_tray_icon()

def get_tray_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
    global is_paused, current_stats, last_check_time
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if is_paused:
        if pause_until:
            pause_str = f"–ù–∞ –ø–∞—É–∑–µ –¥–æ {pause_until.strftime('%H:%M')}"
        else:
            pause_str = "–ù–∞ –ø–∞—É–∑–µ"
        status_item = pystray.MenuItem(f"‚è∏Ô∏è {pause_str}", None, enabled=False)
    else:
        total = current_stats['total']
        overdue = current_stats['overdue']
        status_item = pystray.MenuItem(f"üü¢ –ê–∫—Ç–∏–≤–µ–Ω ({total} –∑–∞–¥–∞—á, {overdue} –ø—Ä–æ—Å—Ä–æ—á.)", None, enabled=False)
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if last_check_time:
        time_str = last_check_time.strftime('%H:%M:%S')
        last_check_item = pystray.MenuItem(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time_str}", None, enabled=False)
    else:
        last_check_item = pystray.MenuItem("–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å", None, enabled=False)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    menu = pystray.Menu(
        status_item,
        last_check_item,
        pystray.Menu.SEPARATOR,
        pystray.MenuItem("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", lambda: check_tasks_now()),
        pystray.MenuItem("‚è∏Ô∏è –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å", lambda: pause_monitoring(60)) if not is_paused else pystray.MenuItem("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", lambda: resume_monitoring()),
        pystray.MenuItem("‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞ 9:00", lambda: pause_until_tomorrow()) if not is_paused else None,
        pystray.Menu.SEPARATOR,
        pystray.MenuItem("üåê –û—Ç–∫—Ä—ã—Ç—å Planfix", lambda: open_planfix()),
        pystray.MenuItem("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", lambda: show_help()),
        pystray.Menu.SEPARATOR,
        pystray.MenuItem("‚ùå –í—ã—Ö–æ–¥", lambda: quit_application()),
    )
    
    return menu

def check_tasks_now():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å–µ–π—á–∞—Å"""
    global last_check_time
    try:
        if planfix_api:
            tasks = planfix_api.get_filtered_tasks()
            categorized_tasks = categorize_tasks(tasks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_stats['total'] = len(tasks)
            current_stats['overdue'] = len(categorized_tasks['overdue'])
            current_stats['urgent'] = len(categorized_tasks['urgent'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            new_notifications = 0
            for category, tasks_list in categorized_tasks.items():
                if not app_config['notifications'].get(category, True):
                    continue
                    
                for task in tasks_list:
                    task_id = str(task.get('id'))
                    title, message = format_task_message(task, category)
                    
                    if show_toast_notification(title, message, category, task_id):
                        new_notifications += 1
                        time.sleep(0.5)
            
            last_check_time = datetime.datetime.now()
            update_tray_icon()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º balloon tip —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if tray_icon:
                if new_notifications > 0:
                    tray_icon.notify(f"–ù–∞–π–¥–µ–Ω–æ {new_notifications} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "Planfix Reminder")
                else:
                    tray_icon.notify(f"–ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á, –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç", "Planfix Reminder")
                    
    except Exception as e:
        if tray_icon:
            tray_icon.notify(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)[:50]}", "Planfix Reminder")

def pause_monitoring(minutes: int):
    """–°—Ç–∞–≤–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑—É"""
    global is_paused, pause_until
    is_paused = True
    pause_until = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
    update_tray_icon()
    
    if tray_icon:
        tray_icon.notify(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç", "Planfix Reminder")

def pause_until_tomorrow():
    """–°—Ç–∞–≤–∏—Ç –Ω–∞ –ø–∞—É–∑—É –¥–æ –∑–∞–≤—Ç—Ä–∞ 9:00"""
    global is_paused, pause_until
    is_paused = True
    tomorrow = datetime.date.today() + datetime.timedelta(days=1)
    pause_until = datetime.datetime.combine(tomorrow, datetime.time(9, 0))
    update_tray_icon()
    
    if tray_icon:
        tray_icon.notify("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞ 9:00", "Planfix Reminder")

def resume_monitoring():
    """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    global is_paused, pause_until
    is_paused = False
    pause_until = None
    update_tray_icon()
    
    if tray_icon:
        tray_icon.notify("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω", "Planfix Reminder")

def open_planfix():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Planfix –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    try:
        url = app_config['planfix']['account_url'].replace('/rest', '')
        webbrowser.open(url)
    except Exception:
        webbrowser.open("https://planfix.com")

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
Planfix Reminder - –°–ø—Ä–∞–≤–∫–∞

–£–ü–†–ê–í–õ–ï–ù–ò–ï:
‚Ä¢ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏
‚Ä¢ –ü–ö–ú –ø–æ –∏–∫–æ–Ω–∫–µ - –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–∞—É–∑–∞ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –í—ã—Ö–æ–¥ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É

–¶–í–ï–¢–ê –ò–ö–û–ù–ö–ò:
üü¢ –ó–µ–ª–µ–Ω—ã–π - –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
üü° –û—Ä–∞–Ω–∂–µ–≤—ã–π - –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
üî¥ –ö—Ä–∞—Å–Ω—ã–π - –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚ö´ –°–µ—Ä—ã–π - –Ω–∞ –ø–∞—É–∑–µ

–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –û—Ä–∞–Ω–∂–µ–≤—ã–µ - —Å—Ä–æ—á–Ω—ã–µ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
‚Ä¢ –°–∏–Ω–∏–µ - –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.ini
    """
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
    help_window = tk.Tk()
    help_window.title("–°–ø—Ä–∞–≤–∫–∞ - Planfix Reminder")
    help_window.geometry("500x400")
    help_window.resizable(False, False)
    
    text_widget = tk.Text(help_window, wrap=tk.WORD, padx=10, pady=10)
    text_widget.pack(fill=tk.BOTH, expand=True)
    text_widget.insert(tk.END, help_text)
    text_widget.config(state=tk.DISABLED)
    
    help_window.mainloop()

def quit_application():
    """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global tray_icon
    if tray_icon:
        tray_icon.stop()
    os._exit(0)

def on_double_click(icon, item):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ"""
    check_tasks_now()

def create_and_run_tray():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
    global tray_icon
    
    tray_icon = pystray.Icon(
        name="Planfix Reminder",
        icon=create_tray_icon(),
        title="Planfix Reminder",
        menu=get_tray_menu()
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    def update_menu():
        while True:
            time.sleep(30)
            if tray_icon:
                tray_icon.menu = get_tray_menu()
    
    threading.Thread(target=update_menu, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π
    tray_icon.run_detached()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–µ–º
    """
    global planfix_api, current_stats, last_check_time
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Planfix Reminder...")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if not load_config():
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        
        try:
            import tkinter.messagebox as msgbox
            root = tk.Tk()
            root.withdraw()
            
            msgbox.showerror("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                           "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.ini\n\n"
                           "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                           "‚Ä¢ –§–∞–π–ª config.ini —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                           "‚Ä¢ API —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
                           "‚Ä¢ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /rest")
            root.destroy()
        except:
            pass
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    print("\nüåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Planfix API...")
    planfix_api = PlanfixAPI()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if not planfix_api.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
        
        try:
            import tkinter.messagebox as msgbox
            root = tk.Tk()
            root.withdraw()
            
            msgbox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                           "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API\n\n"
                           "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                           "‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                           "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞\n"
                           "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Planfix")
            root.destroy()
        except:
            pass
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ!")
    
    print(f"\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   Filter ID: {app_config['planfix']['filter_id'] or '–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø'}")
    print(f"   User ID: {app_config['planfix']['user_id']}")
    print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {app_config['check_interval']} —Å–µ–∫")
    
    print("\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è...")
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
    try:
        create_and_run_tray()
        print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ—è: {e}")
    
    print("\nüì¨ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        toast_manager = ToastManager()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return
    
    print(f"\n‚è∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("=" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def monitor_tasks():
        global current_stats, last_check_time, is_paused, pause_until
        cleanup_counter = 0
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –ª–∏ –º—ã
                if is_paused:
                    if pause_until and datetime.datetime.now() >= pause_until:
                        # –í—Ä–µ–º—è –ø–∞—É–∑—ã –∏—Å—Ç–µ–∫–ª–æ
                        resume_monitoring()
                    else:
                        # –í—Å–µ –µ—â–µ –Ω–∞ –ø–∞—É–∑–µ
                        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        continue
                
                cleanup_closed_windows()
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks = planfix_api.get_filtered_tasks()
                if not tasks:
                    print("‚ÑπÔ∏è –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
                    time.sleep(app_config['check_interval'])
                    continue
                    
                categorized_tasks = categorize_tasks(tasks)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_stats['total'] = len(tasks)
                current_stats['overdue'] = len(categorized_tasks.get('overdue', []))
                current_stats['urgent'] = len(categorized_tasks.get('urgent', []))
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {current_stats['total']} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {current_stats['overdue']}, —Å—Ä–æ—á–Ω–æ: {current_stats['urgent']})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                new_notifications = 0
                for category, tasks_list in categorized_tasks.items():
                    if not app_config['notifications'].get(category, True):
                        continue
                        
                    for task in tasks_list:
                        task_id = str(task.get('id'))
                        title, message = format_task_message(task, category)
                        
                        if show_toast_notification(title, message, category, task_id):
                            new_notifications += 1
                            print(f"üì¨ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {category} - {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        time.sleep(1)
                
                if new_notifications == 0:
                    print("üì≠ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
                
                last_check_time = datetime.datetime.now()
                update_tray_icon()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                cleanup_counter += 1
                if cleanup_counter >= 10:
                    cleanup_old_closed_tasks()
                    cleanup_counter = 0
                
                time.sleep(app_config['check_interval'])
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(30)
    
    monitor_thread = threading.Thread(target=monitor_tasks, daemon=True)
    monitor_thread.start()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        toast_manager.run()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ GUI: {e}")
    finally:
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        quit_application()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)