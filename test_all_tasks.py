#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
"""
import requests
import json
import configparser

def load_config():
    config = configparser.ConfigParser()
    config.read('config.ini', encoding='utf-8')
    return config['Planfix']['api_token'], config['Planfix']['account_url']

def test_all_tasks():
    api_token, account_url = load_config()
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_token}'
    }
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤—Å–µ –∑–∞–¥–∞—á–∏
    payload = {
        "offset": 0,
        "pageSize": 10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        "fields": "id,name,description,endDateTime,status,priority,assignees,overdue"
    }
    
    print(f"üìã –ó–∞–ø—Ä–æ—Å: {json.dumps(payload, indent=2, ensure_ascii=False)}")
    
    response = requests.post(
        f"{account_url}/task/list",
        headers=headers,
        json=payload,
        timeout=15
    )
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    
    if response.status_code == 200:
        try:
            data = response.json()
            
            if data.get('result') == 'fail':
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('error')}")
                return
            
            tasks = data.get('tasks', [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
            
            if tasks:
                print(f"\nüìã –°–ü–ò–°–û–ö –ó–ê–î–ê–ß:")
                print("-" * 40)
                
                for i, task in enumerate(tasks, 1):
                    print(f"\n{i}. ID: {task.get('id')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                    # –°—Ç–∞—Ç—É—Å
                    status = task.get('status', {})
                    if isinstance(status, dict):
                        print(f"   –°—Ç–∞—Ç—É—Å: {status.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    else:
                        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                    
                    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                    assignees = task.get('assignees', {})
                    if assignees:
                        users = assignees.get('users', [])
                        groups = assignees.get('groups', [])
                        
                        if users:
                            user_names = [u.get('name', f"ID:{u.get('id')}") for u in users]
                            print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {', '.join(user_names)}")
                        
                        if groups:
                            group_names = [g.get('name', f"ID:{g.get('id')}") for g in groups]
                            print(f"   –ì—Ä—É–ø–ø—ã: {', '.join(group_names)}")
                    
                    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    end_date = task.get('endDateTime')
                    if end_date:
                        if isinstance(end_date, dict):
                            date_str = end_date.get('date') or end_date.get('datetime') or '–£–∫–∞–∑–∞–Ω–∞'
                        else:
                            date_str = str(end_date)
                        print(f"   –°—Ä–æ–∫: {date_str}")
                    
                    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏
                    if task.get('overdue'):
                        print(f"   üî¥ –ü–†–û–°–†–û–ß–ï–ù–ê!")
                
                print(f"\n" + "=" * 50)
                print("üí° –ê–ù–ê–õ–ò–ó:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                all_assignees = set()
                for task in tasks:
                    assignees = task.get('assignees', {})
                    users = assignees.get('users', [])
                    for user in users:
                        user_id = user.get('id')
                        user_name = user.get('name', f'ID:{user_id}')
                        all_assignees.add(f"{user_name} (ID: {user_id})")
                
                if all_assignees:
                    print(f"üë• –í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –≤ –∑–∞–¥–∞—á–∞—Ö:")
                    for assignee in sorted(all_assignees):
                        print(f"   - {assignee}")
                else:
                    print("‚ö†Ô∏è –ù–∏ –≤ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:1
                user_1_tasks = []
                for task in tasks:
                    assignees = task.get('assignees', {})
                    users = assignees.get('users', [])
                    for user in users:
                        if user.get('id') == '1' or user.get('id') == 1:
                            user_1_tasks.append(task.get('name'))
                
                if user_1_tasks:
                    print(f"\n‚úÖ –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:1 (–ê–Ω–¥—Ä–µ–π):")
                    for task_name in user_1_tasks:
                        print(f"   - {task_name}")
                else:
                    print(f"\n‚ùå –ó–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:1 (–ê–Ω–¥—Ä–µ–π) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   - –ó–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    print("   - –ó–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—ã")
                    print("   - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
            
            else:
                print("üì≠ –í —Å–∏—Å—Ç–µ–º–µ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ Planfix")
                
        except json.JSONDecodeError:
            print(f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text[:500]}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.text}")

def main():
    test_all_tasks()

if __name__ == "__main__":
    main()