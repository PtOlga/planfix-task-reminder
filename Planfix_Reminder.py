import requests
import time
from plyer import notification
import datetime
import sys
import configparser
import os
import json
from typing import List, Dict, Any

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CHECK_INTERVAL_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç

class PlanfixAPI:
    def __init__(self, account_url: str, api_token: str):
        self.account_url = account_url.rstrip('/')
        self.api_token = api_token
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        })
        self.user_id = None
        self.user_name = None

    def get_current_user_id(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ /user/list
        """
        try:
            payload = {
                'offset': 0,
                'pageSize': 100,
                'fields': 'id,name,midname,lastname'
            }
            response = self.session.post(
                f"{self.account_url}/user/list",
                json=payload,
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                users = data.get('users', [])
                if users:
                    self.user_id = users[0].get('id')
                    self.user_name = users[0].get('name', 'Unknown')
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_name} (ID: {self.user_id})")
                    return self.user_id
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ /user/list")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_current_user_tasks(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ Planfix API
        –í–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º
        """
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if not self.user_id:
            self.get_current_user_id()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_name} (ID: {self.user_id})")
        print("üìã –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_user_tasks = []
            
            # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
            filter_configs = [
                {
                    "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                    "filters": [
                        {
                            "type": 2,  # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
                            "operator": "equal",
                            "value": f"user:{self.user_id}"
                        }
                    ]
                },
                {
                    "name": "–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫", 
                    "filters": [
                        {
                            "type": 3,  # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫—É
                            "operator": "equal",
                            "value": f"user:{self.user_id}"
                        }
                    ]
                },
                {
                    "name": "–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä/–£—á–∞—Å—Ç–Ω–∏–∫",
                    "filters": [
                        {
                            "type": 4,  # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º/–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞–º
                            "operator": "equal", 
                            "value": f"user:{self.user_id}"
                        }
                    ]
                }
            ]
            
            task_ids_seen = set()  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
            
            for config in filter_configs:
                try:
                    payload = {
                        "offset": 0,
                        "pageSize": 100,
                        "filters": config["filters"],
                        "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
                    }
                    
                    response = self.session.post(
                        f"{self.account_url}/task/list",
                        json=payload,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('result') != 'fail':
                            tasks = data.get('tasks', [])
                            print(f"   {config['name']}: –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                            for task in tasks:
                                task_id = task.get('id')
                                if task_id not in task_ids_seen:
                                    task_ids_seen.add(task_id)
                                    all_user_tasks.append(task)
                        else:
                            print(f"   {config['name']}: {data.get('error', '–æ—à–∏–±–∫–∞ API')}")
                    else:
                        print(f"   {config['name']}: HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"   {config['name']}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
            if not all_user_tasks:
                print("üîÑ –§–∏–ª—å—Ç—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é")
                all_user_tasks = self._get_all_tasks_and_filter_manually()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = []
            closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞']
            
            for task in all_user_tasks:
                status = task.get('status', {})
                status_name = status.get('name', '') if isinstance(status, dict) else str(status)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
                if status_name not in closed_statuses:
                    active_tasks.append(task)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è {self.user_name}: {len(active_tasks)}")
            
            if active_tasks:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                overdue_count = 0
                with_deadline = 0
                
                for task in active_tasks:
                    if task.get('overdue'):
                        overdue_count += 1
                    if task.get('endDateTime'):
                        with_deadline += 1
                
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: {overdue_count}")
                print(f"   üìÖ –° –¥–µ–¥–ª–∞–π–Ω–æ–º: {with_deadline}")
                print(f"   üìù –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞: {len(active_tasks) - with_deadline}")
            
            return active_tasks
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}")
            return []

    def _get_all_tasks_and_filter_manually(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é
        """
        try:
            payload = {
                "offset": 0,
                "pageSize": 200,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
                "fields": "id,name,description,endDateTime,startDateTime,status,priority,assignees,participants,auditors,assigner,overdue"
            }
            
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                all_tasks = data.get('tasks', [])
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ª—é–±–æ–π —Ä–æ–ª–∏
                user_tasks = []
                user_id_str = str(self.user_id)
                
                for task in all_tasks:
                    is_user_involved = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                    assignees = task.get('assignees', {})
                    if assignees:
                        users = assignees.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants = task.get('participants', {})
                    if participants and not is_user_involved:
                        users = participants.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤
                    auditors = task.get('auditors', {})
                    if auditors and not is_user_involved:
                        users = auditors.get('users', [])
                        for user in users:
                            if str(user.get('id', '')) == user_id_str:
                                is_user_involved = True
                                break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
                    assigner = task.get('assigner', {})
                    if assigner and not is_user_involved:
                        if str(assigner.get('id', '')) == user_id_str:
                            is_user_involved = True
                    
                    if is_user_involved:
                        user_tasks.append(task)
                
                print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_tasks)}")
                return user_tasks
            else:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return []
      
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API, –ø—ã—Ç–∞—è—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
        """
        try:
            payload = {
                "offset": 0,
                "pageSize": 1,
                "fields": "id,name"
            }
            response = self.session.post(
                f"{self.account_url}/user/list",
                json=payload,
                timeout=10
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('result') == 'fail':
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code} - {response.text[:500]}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

def categorize_tasks(tasks: List[Dict]) -> Dict[str, List[Dict]]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
    """
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    
    categorized = {
        'overdue': [],    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ (–¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª, –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞)
        'urgent': [],     # –°—Ä–æ—á–Ω—ã–µ (–¥–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
        'current': []     # –¢–µ–∫—É—â–∏–µ (–¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞)
    }
    
    closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞']
    
    for task in tasks:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = task.get('status', {})
            status_name = status.get('name', '') if isinstance(status, dict) else str(status)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
            if status_name in closed_statuses:
                continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ overdue –∏–∑ API –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
            if task.get('overdue', False):
                categorized['overdue'].append(task)
                continue
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ endDateTime
            end_date_info = task.get('endDateTime')
            end_date = None
            
            if end_date_info:
                if isinstance(end_date_info, dict):
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç—ã –∏–∑ API
                    date_str = (end_date_info.get('datetime') or 
                              end_date_info.get('date') or 
                              end_date_info.get('dateTimeUtcSeconds'))
                else:
                    date_str = str(end_date_info)
                
                if date_str:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                        if 'T' in date_str:
                            # ISO —Ñ–æ—Ä–º–∞—Ç: 1900-12-01T00:00Z
                            end_date = datetime.datetime.fromisoformat(date_str.replace('Z', '+00:00')).date()
                        elif '-' in date_str:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–µ—Ñ–∏—Å–∞–º–∏
                            formats_to_try = ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                        elif '.' in date_str:
                            # –§–æ—Ä–º–∞—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏
                            formats_to_try = ['%d.%m.%Y', '%d.%m.%y']
                            for date_format in formats_to_try:
                                try:
                                    end_date = datetime.datetime.strptime(date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task.get('id')}: {e}")
            
            # Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ endDate (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if not end_date:
                end_date_str = task.get('endDate', '')
                if end_date_str:
                    try:
                        if 'T' in end_date_str:
                            end_date = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00')).date()
                        else:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                            for date_format in ['%Y-%m-%d', '%d-%m-%Y', '%d.%m.%Y']:
                                try:
                                    end_date = datetime.datetime.strptime(end_date_str, date_format).date()
                                    break
                                except ValueError:
                                    continue
                    except Exception:
                        pass
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ–º –∑–∞–¥–∞—á—É
            if end_date:
                if end_date < today:
                    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                    categorized['overdue'].append(task)
                elif end_date <= tomorrow:
                    # –°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞)
                    categorized['urgent'].append(task)
                else:
                    # –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –≤ –±—É–¥—É—â–µ–º
                    categorized['current'].append(task)
            else:
                # –ó–∞–¥–∞—á–∞ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ - —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–π
                categorized['current'].append(task)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.get('id', 'Unknown')}: {e}")
            categorized['current'].append(task)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ç–µ–∫—É—â–∏–µ
    
    return categorized

def show_notification(title: str, message: str, urgency: str = 'normal'):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if len(title) > 64:
            print(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(title)} —Å–∏–º–≤–æ–ª–æ–≤): {title}")
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
            title = title[:61] + "..."
            print(f"   –û–±—Ä–µ–∑–∞–Ω –¥–æ: {title}")
        
        timeout = {
            'critical': 15,
            'urgent': 12,
            'normal': 8
        }.get(urgency, 8)
        
        notification.notify(
            title=title,
            message=message,
            app_name="Planfix Reminder",
            timeout=timeout
        )
        
        print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üìß {urgency.upper()}: {title}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫ ({len(title)} —Å–∏–º–≤–æ–ª–æ–≤): {title}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤): {message[:100]}...")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install plyer")

def format_task_message(task: Dict, category: str) -> tuple:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    task_name = task.get('name', '–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = task.get('description', '')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_date_info = task.get('endDateTime')
    end_date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    
    if end_date_info:
        if isinstance(end_date_info, dict):
            end_date_str = (end_date_info.get('date') or 
                          end_date_info.get('datetime') or 
                          '–£–∫–∞–∑–∞–Ω–∞')
        else:
            end_date_str = str(end_date_info)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority = task.get('priority', 'NotUrgent')
    priority_text = {
        'NotUrgent': '–û–±—ã—á–Ω–∞—è',
        'Low': '–ù–∏–∑–∫–∞—è', 
        'Normal': '–û–±—ã—á–Ω–∞—è',
        'High': '–í—ã—Å–æ–∫–∞—è',
        'Critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'
    }.get(priority, priority)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = task.get('status', {})
    if isinstance(status, dict):
        status_name = status.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    else:
        status_name = str(status)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞—á–µ
    user_roles = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    assignees = task.get('assignees', {})
    assignee_names = []
    if assignees:
        users = assignees.get('users', [])
        for user in users:
            name = user.get('name', f"ID:{user.get('id')}")
            assignee_names.append(name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞
    assigner = task.get('assigner', {})
    assigner_name = assigner.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if assigner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = task.get('participants', {})
    participant_names = []
    if participants:
        users = participants.get('users', [])
        for user in users:
            participant_names.append(user.get('name', f"ID:{user.get('id')}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤  
    auditors = task.get('auditors', {})
    auditor_names = []
    if auditors:
        users = auditors.get('users', [])
        for user in users:
            auditor_names.append(user.get('name', f"ID:{user.get('id')}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    if assignee_names:
        assignee_text = ', '.join(assignee_names)
    else:
        assignee_text = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if len(description) > 80:
        description = description[:80] + "..."
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_date = end_date_str
    if end_date_str and end_date_str not in ['–ù–µ —É–∫–∞–∑–∞–Ω–∞', '–£–∫–∞–∑–∞–Ω–∞']:
        try:
            if 'T' in end_date_str:
                date_obj = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))
                formatted_date = date_obj.strftime('%d.%m.%Y')
            elif '-' in end_date_str and len(end_date_str) >= 8:
                # –§–æ—Ä–º–∞—Ç—ã —Å –¥–µ—Ñ–∏—Å–∞–º–∏
                for date_format in ['%d-%m-%Y', '%Y-%m-%d', '%d-%m-%y']:
                    try:
                        date_obj = datetime.datetime.strptime(end_date_str, date_format)
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                        break
                    except ValueError:
                        continue
            elif '.' in end_date_str:
                # –§–æ—Ä–º–∞—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏
                for date_format in ['%d.%m.%Y', '%d.%m.%y']:
                    try:
                        date_obj = datetime.datetime.strptime(end_date_str, date_format)
                        formatted_date = date_obj.strftime('%d.%m.%Y')
                        break
                    except ValueError:
                        continue
        except:
            formatted_date = end_date_str
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –¥–ª—è Windows (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
    title_prefix = {
        'overdue': 'üî¥ –ü–†–û–°–†–û–ß–ï–ù–û',
        'urgent': 'üü° –°–†–û–ß–ù–û', 
        'current': 'üìã –ó–ê–î–ê–ß–ê'
    }.get(category, 'üìã –ó–ê–î–ê–ß–ê')
    
    # –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è Windows —Å —ç–º–æ–¥–∑–∏ - 55 —Å–∏–º–≤–æ–ª–æ–≤
    safe_limit = 55
    separator = ": "
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    prefix_and_separator_length = len(title_prefix) + len(separator)
    max_task_name_length = safe_limit - prefix_and_separator_length
    
    if max_task_name_length <= 3:  # –ï—Å–ª–∏ –º–µ—Å—Ç–∞ —Å–æ–≤—Å–µ–º –º–∞–ª–æ
        task_name_short = "..."
    elif len(task_name) > max_task_name_length:
        task_name_short = task_name[:max_task_name_length-3] + "..."
    else:
        task_name_short = task_name
    
    title = f"{title_prefix}{separator}{task_name_short}"
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(title) > safe_limit:
        # –ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
        title = title[:safe_limit-3] + "..."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [f"üìÖ –°—Ä–æ–∫: {formatted_date}"]
    message_parts.append(f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {assignee_text}")
    
    if assigner_name != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        message_parts.append(f"üìù –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {assigner_name}")
    
    if participant_names:
        message_parts.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participant_names)}")
    
    if auditor_names:
        message_parts.append(f"üëÅ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ã: {', '.join(auditor_names)}")
    
    if priority_text != '–û–±—ã—á–Ω–∞—è':
        message_parts.append(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
    
    if status_name != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        message_parts.append(f"üìä –°—Ç–∞—Ç—É—Å: {status_name}")
    
    if description:
        message_parts.append(f"üìÑ {description}")
    
    # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ
    if len(task_name) > max_task_name_length:
        message_parts.insert(0, f"üìã {task_name}")
    
    message = "\n".join(message_parts)
    
    return title, message

def load_config() -> tuple:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    """
    config = configparser.ConfigParser()
    config_file_path = 'config.ini'
    
    if not os.path.exists(config_file_path):
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.ini' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("""
[Planfix]
api_token = –í–ê–®_API_–¢–û–ö–ï–ù
account_url = https://–≤–∞—à-–∞–∫–∫–∞—É–Ω—Ç.planfix.com/rest

[Settings]
check_interval = 300
notify_current = true
notify_urgent = true
notify_overdue = true
        """.strip())
        sys.exit(1)
    
    encodings_to_try = ['utf-8', 'cp1251', 'windows-1251', 'latin-1']
    
    for encoding in encodings_to_try:
        try:
            config.read(config_file_path, encoding=encoding)
            api_token = config['Planfix']['api_token']
            account_url = config['Planfix']['account_url']
            check_interval = int(config.get('Settings', 'check_interval', fallback=300))
            notification_settings = {
                'current': config.getboolean('Settings', 'notify_current', fallback=True),
                'urgent': config.getboolean('Settings', 'notify_urgent', fallback=True),
                'overdue': config.getboolean('Settings', 'notify_overdue', fallback=True)
            }
            if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', '–í–ê–®_API_–¢–û–ö–ï–ù_–ó–î–ï–°–¨']:
                print("‚ùå API-—Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.ini")
                print("üîë –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Planfix –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
                sys.exit(1)
            if not account_url.endswith('/rest'):
                print(f"‚ö†Ô∏è account_url '{account_url}' –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/rest'")
                print("   –ü—Ä–∏–º–µ—Ä: https://l-s.planfix.com/rest")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
            return api_token, account_url, check_interval, notification_settings
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.ini")
    sys.exit(1)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ Planfix Reminder...")
    api_token, account_url, check_interval, notification_settings = load_config()
    planfix = PlanfixAPI(account_url, api_token)
    
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫")
    print(f"   - URL –∞–∫–∫–∞—É–Ω—Ç–∞: {account_url}")
    print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_settings}")
    
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Planfix...")
    if not planfix.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        sys.exit(1)
    
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    notified_tasks = set()
    
    while True:
        try:
            tasks = planfix.get_current_user_tasks()
            if not tasks:
                print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(check_interval)
                continue
                
            categorized_tasks = categorize_tasks(tasks)
            stats = {k: len(v) for k, v in categorized_tasks.items()}
            print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üìä –ó–∞–¥–∞—á: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {stats['overdue']}, —Å—Ä–æ—á–Ω–æ {stats['urgent']}, —Ç–µ–∫—É—â–∏–µ {stats['current']}")
            
            new_notifications = 0
            for category, tasks_list in categorized_tasks.items():
                if not notification_settings.get(category, True):
                    continue
                    
                urgency_map = {
                    'overdue': 'critical',
                    'urgent': 'urgent',
                    'current': 'normal'
                }
                
                for task in tasks_list:
                    task_id = task.get('id')
                    if task_id not in notified_tasks:
                        title, message = format_task_message(task, category)
                        show_notification(title, message, urgency_map[category])
                        notified_tasks.add(task_id)
                        new_notifications += 1
                        time.sleep(1)
            
            if new_notifications == 0:
                print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] ‚úÖ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
            else:
                print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_notifications} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –°–±—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–π —á–∞—Å
            current_hour = datetime.datetime.now().hour
            if hasattr(main, 'last_hour') and main.last_hour != current_hour:
                notified_tasks.clear()
                print("üîÑ –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–Ω–æ–≤—ã–π —á–∞—Å)")
            main.last_hour = current_hour
            
            time.sleep(check_interval)
            
        except KeyboardInterrupt:
            print("\nüëã Planfix Reminder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == "__main__":
    main()