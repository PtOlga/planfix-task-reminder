import requests
import time
from plyer import notification
import datetime
import sys
import configparser
import os
import json
from typing import List, Dict, Any

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CHECK_INTERVAL_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç

class PlanfixAPI:
    def __init__(self, account_url: str, api_token: str):
        self.account_url = account_url.rstrip('/')
        self.api_token = api_token
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.api_token}'
        })
        self.user_id = None
        self.user_name = None

    def get_current_user_id(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ /user/list
        """
        try:
            response = self.session.post(
                f"{self.account_url}/user/list",
                json={},
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                users = data.get('users', [])
                # –û–±—ã—á–Ω–æ —Ç–æ–∫–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if users:
                    self.user_id = users[0].get('id')
                    self.user_name = users[0].get('name', 'Unknown')
                    return self.user_id
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ /user/list")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_current_user_tasks(self) -> List[Dict[Any, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Planfix API
        """
        if not self.user_id:
            self.get_current_user_id()
        if not self.user_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.")
            return []
        print(f"üë§ –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_name} (ID: {self.user_id})")
        try:
            payload = {
                'filters': [
                    {
                        'field': 'status',
                        'operator': 'in',
                        'value': ['1', '2']
                    },
                    {
                        'field': 'assignee',
                        'operator': 'eq',
                        'value': [str(self.user_id)]
                    }
                ],
                'fields': ['id', 'name', 'description', 'beginDate', 'endDate', 'status', 'priority', 'assignee', 'general']
            }
            response = self.session.post(
                f"{self.account_url}/task/list",
                json=payload,
                timeout=30
            )
            print(f"üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                if 'tasks' in data:
                    tasks = data['tasks']
                elif isinstance(data, list):
                    tasks = data
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                    tasks = []
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                return tasks
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:1000]}")
                return []
        except requests.exceptions.RequestException as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Planfix API: {e}")
            return []
        except json.JSONDecodeError as e:
            print(f"üìÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API (–Ω–µ–≤–µ—Ä–Ω—ã–π JSON): {e}")
            print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {response.text[:500]}")
            return []

    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API, –ø—ã—Ç–∞—è—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
        """
        try:
            response = self.session.post(
                f"{self.account_url}/user/list",
                json={},
                timeout=10
            )
            if response.status_code == 200:
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code} - {response.text[:500]}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

def categorize_tasks(tasks: List[Dict]) -> Dict[str, List[Dict]]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ
    """
    today = datetime.date.today()
    tomorrow = today + datetime.timedelta(days=1)
    
    categorized = {
        'overdue': [],
        'urgent': [],
        'current': []
    }
    
    for task in tasks:
        try:
            end_date_str = task.get('endDate', '')
            if not end_date_str:
                categorized['current'].append(task)
                continue
            if 'T' in end_date_str:
                end_date = datetime.datetime.fromisoformat(end_date_str.replace('Z', '+00:00')).date()
            else:
                end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()
            if end_date < today:
                categorized['overdue'].append(task)
            elif end_date <= tomorrow:
                categorized['urgent'].append(task)
            else:
                categorized['current'].append(task)
        except (ValueError, TypeError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{task.get('endDate', '')}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task.get('id', 'Unknown')}: {e}")
            categorized['current'].append(task)
    return categorized

def show_notification(title: str, message: str, urgency: str = 'normal'):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏
    """
    try:
        timeout = {
            'critical': 15,
            'urgent': 12,
            'normal': 8
        }.get(urgency, 8)
        
        notification.notify(
            title=title,
            message=message,
            app_name="Planfix Reminder",
            timeout=timeout
        )
        
        print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üìß {urgency.upper()}: {title}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   - pip install plyer")
        print("   - –î–ª—è Linux: sudo apt-get install libnotify-bin")
        print("   - –î–ª—è macOS: brew install terminal-notifier")

def format_task_message(task: Dict, category: str) -> tuple:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    task_name = task.get('name', '–ó–∞–¥–∞—á–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = task.get('description', '')
    end_date = task.get('endDate', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    priority = task.get('priority', '–û–±—ã—á–Ω–∞—è')
    
    if len(description) > 100:
        description = description[:100] + "..."
    
    formatted_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if end_date and end_date != '–ù–µ —É–∫–∞–∑–∞–Ω–∞':
        try:
            if 'T' in end_date:
                date_obj = datetime.datetime.fromisoformat(end_date.replace('Z', '+00:00'))
            else:
                date_obj = datetime.datetime.strptime(end_date, "%Y-%m-%d")
            formatted_date = date_obj.strftime('%d.%m.%Y')
        except:
            formatted_date = end_date
    
    title_prefix = {
        'overdue': 'üî¥ –ü–†–û–°–†–û–ß–ï–ù–û',
        'urgent': 'üü° –°–†–û–ß–ù–û',
        'current': 'üìã –ó–ê–î–ê–ß–ê'
    }.get(category, 'üìã –ó–ê–î–ê–ß–ê')
    
    title = f"{title_prefix}: {task_name}"
    
    message_parts = [f"üìÖ –°—Ä–æ–∫: {formatted_date}"]
    if priority and priority != '–û–±—ã—á–Ω–∞—è':
        message_parts.append(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
    if description:
        message_parts.append(f"üìù {description}")
    
    message = "\n".join(message_parts)
    
    return title, message

def load_config() -> tuple:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    """
    config = configparser.ConfigParser()
    config_file_path = 'config.ini'
    
    if not os.path.exists(config_file_path):
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.ini' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("""
[Planfix]
api_token = –í–ê–®_API_–¢–û–ö–ï–ù
account_url = https://–≤–∞—à-–∞–∫–∫–∞—É–Ω—Ç.planfix.com/rest

[Settings]
check_interval = 300
notify_current = true
notify_urgent = true
notify_overdue = true
        """.strip())
        sys.exit(1)
    
    encodings_to_try = ['utf-8', 'cp1251', 'windows-1251', 'latin-1']
    
    for encoding in encodings_to_try:
        try:
            config.read(config_file_path, encoding=encoding)
            api_token = config['Planfix']['api_token']
            account_url = config['Planfix']['account_url']
            check_interval = int(config.get('Settings', 'check_interval', fallback=300))
            notification_settings = {
                'current': config.getboolean('Settings', 'notify_current', fallback=True),
                'urgent': config.getboolean('Settings', 'notify_urgent', fallback=True),
                'overdue': config.getboolean('Settings', 'notify_overdue', fallback=True)
            }
            if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', '–í–ê–®_API_–¢–û–ö–ï–ù_–ó–î–ï–°–¨']:
                print("‚ùå API-—Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.ini")
                print("üîë –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Planfix –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
                sys.exit(1)
            if not account_url.endswith('/rest'):
                print(f"‚ö†Ô∏è account_url '{account_url}' –≤ config.ini –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/rest'.")
                print("   –ü—Ä–∏–º–µ—Ä: https://l-s.planfix.com/rest")
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
            return api_token, account_url, check_interval, notification_settings
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.ini –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
    print("üí° –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.ini –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8")
    sys.exit(1)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ Planfix Reminder...")
    api_token, account_url, check_interval, notification_settings = load_config()
    planfix = PlanfixAPI(account_url, api_token)
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫")
    print(f"   - URL –∞–∫–∫–∞—É–Ω—Ç–∞: {account_url}")
    print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_settings}")
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Planfix...")
    if not planfix.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞")
        print("   - URL –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ config.ini (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /rest)")
        print("   - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        sys.exit(1)
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    notified_tasks = set()
    while True:
        try:
            tasks = planfix.get_current_user_tasks()
            if not tasks:
                print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                time.sleep(check_interval)
                continue
            categorized_tasks = categorize_tasks(tasks)
            stats = {k: len(v) for k, v in categorized_tasks.items()}
            print(f"[{datetime.datetime.now().strftime('%H:%M:%S')}] üìä –ó–∞–¥–∞—á: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {stats['overdue']}, —Å—Ä–æ—á–Ω–æ {stats['urgent']}, —Ç–µ–∫—É—â–∏–µ {stats['current']}")
            new_notifications = 0
            for category, tasks_list in categorized_tasks.items():
                if not notification_settings.get(category, True):
                    continue
                urgency_map = {
                    'overdue': 'critical',
                    'urgent': 'urgent',
                    'current': 'normal'
                }
                for task in tasks_list:
                    task_id = task.get('id')
                    if task_id not in notified_tasks:
                        title, message = format_task_message(task, category)
                        show_notification(title, message, urgency_map[category])
                        notified_tasks.add(task_id)
                        new_notifications += 1
                        time.sleep(1)
            if datetime.datetime.now().hour != (datetime.datetime.now() - datetime.timedelta(seconds=check_interval)).hour:
                notified_tasks.clear()
                print("üîÑ –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–ø—Ä–æ—à–µ–ª —á–∞—Å)")
            time.sleep(check_interval)
        except KeyboardInterrupt:
            print("\nüëã Planfix Reminder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)

if __name__ == "__main__":
    main()