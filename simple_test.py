import requests
import configparser

def test_svetlana_tasks():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = configparser.ConfigParser()
    config.read('admin_config.ini', encoding='utf-8')
    api_token = config['Planfix']['api_token']
    account_url = config['Planfix']['account_url']
    
    session = requests.Session()
    session.headers.update({
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_token}'
    })
    
    print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ó–ê–î–ê–ß –°–í–ï–¢–õ–ê–ù–´ (ID=3)")
    print("="*50)
    
    # –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –≥–¥–µ –°–≤–µ—Ç–ª–∞–Ω–∞ - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    payload = {
        "offset": 0,
        "pageSize": 50,
        "filters": [
            {
                "type": 2,
                "operator": "equal",
                "value": "user:3"
            }
        ],
        "fields": "id,name,status,overdue"
    }
    
    print("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")
    response = session.post(f"{account_url}/task/list", json=payload, timeout=30)
    
    if response.status_code == 200:
        data = response.json()
        if data.get('result') == 'fail':
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('error')}")
            return
        
        tasks = data.get('tasks', [])
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        
        if tasks:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
            closed_statuses = ['–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è', '–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞']
            active_tasks = []
            
            print(f"\nüìã –í–°–ï –ó–ê–î–ê–ß–ò –°–í–ï–¢–õ–ê–ù–´:")
            for i, task in enumerate(tasks, 1):
                status = task.get('status', {})
                status_name = status.get('name', '') if isinstance(status, dict) else str(status)
                overdue = "–ü–†–û–°–†–û–ß–ï–ù–ê" if task.get('overdue') else "–í —Å—Ä–æ–∫"
                
                print(f"   {i}. {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"      –°—Ç–∞—Ç—É—Å: {status_name}")
                print(f"      –°—Ä–æ–∫–∏: {overdue}")
                print()
                
                if status_name not in closed_statuses:
                    active_tasks.append(task)
            
            print(f"üìä –ò–¢–û–ì:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_tasks)}")
            print(f"   –ó–∞–∫—Ä—ã—Ç—ã—Ö: {len(tasks) - len(active_tasks)}")
            
            overdue_count = sum(1 for t in active_tasks if t.get('overdue'))
            print(f"   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {overdue_count}")
            
        else:
            print("‚ùå –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")

if __name__ == "__main__":
    test_svetlana_tasks()
